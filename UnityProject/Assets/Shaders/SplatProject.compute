#pragma kernel CSMain

struct Splat {
    float3 pos;
    float4 col;
    float3 cov0;
    float3 cov1;
    float3 cov2;
};

StructuredBuffer<Splat> SplatData;
AppendStructuredBuffer<uint> VisibleIndices;

cbuffer Params
{
    float4x4 _VP;
    float2   _Screen;
    uint     _Count;
    float    _MinPixels;      // <-- ADD
}

[numthreads(64,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= _Count) return;
    Splat s = SplatData[i];

    float4 clip = mul(_VP, float4(s.pos, 1));
    if (clip.w <= 0) return;
    float3 ndc = clip.xyz / clip.w;
    if (any(ndc < -1) || any(ndc > 1)) return;

    // --- NEW: tiny-LOD skip (rough, diagonal-only) ---
    float sigma = max(s.cov0.x, s.cov1.y);      // “size” in world units (approx)
    float radiusNDC = sigma / max(clip.w, 1e-4);
    float footprintPx = radiusNDC * _Screen.y;  // screen Y in pixels
    if (footprintPx < _MinPixels) return;

    VisibleIndices.Append(i);
}
