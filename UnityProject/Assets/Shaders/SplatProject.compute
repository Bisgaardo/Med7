#pragma kernel CSMain

struct Splat
{
    float3 pos;
    float4 col;
    float3 cov0;
    float3 cov1;
    float3 cov2;
};

StructuredBuffer<Splat> SplatData;               // source data
AppendStructuredBuffer<uint> VisibleIndices;     // output indices

cbuffer Params
{
    float4x4 _VP;        // view-projection matrix
    float2   _Screen;    // screen size (unused but handy)
    uint     _Count;     // number of splats
};

// Projects splats and writes visible ones to VisibleIndices
[numthreads(64,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= _Count) return;
    Splat s = SplatData[i];

    float4 clip = mul(_VP, float4(s.pos, 1));
    if (clip.w <= 0) return;                    // behind camera
    float3 ndc = clip.xyz / clip.w;
    if (any(ndc < -1) || any(ndc > 1)) return;  // frustum cull

    // TODO: compute ellipse radii using covariance for LOD

    VisibleIndices.Append(i);
}
